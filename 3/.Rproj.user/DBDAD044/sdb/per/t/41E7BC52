{
    "contents" : "# Write a function called rankall that takes two arguments: an outcome name (outcome)\n# and a hospital ranking (num). The function reads the outcome-of-care-measures.csv\n# file and returns a 2-column data frame containing the hospital in each state that\n# has the ranking specified in num. For example the function call\n# rankall(\"heart attack\", \"best\") would return a data frame containing the names of\n# the hospitals that are the best in their respective states for 30-day heart attack\n# death rates. The function should return a value for every state (some may be NA).\n# The first column in the data frame is named hospital, which contains the hospital\n# name, and the second column is named state, which contains the 2-character\n# abbreviation for the state name. Hospitals that do not have data on a particular\n# outcome should be excluded from the set of hospitals when deciding the rankings.\nrankall <- function(outcome, num = \"best\") {\n  ## Read outcome data\n  filePath <- file.path(\"data\", \"outcome-of-care-measures.csv\")\n  data <- read.csv(filePath, colClasses = \"character\")\n\n  ## Check that outcome and num are valid\n  ## Check that outcome is valid and if so, set column variable accordingly\n  column <- NULL\n  if (outcome == \"heart attack\") {\n    column <- 11\n  } else if (outcome == \"heart failure\") {\n    column <- 17\n  } else if (outcome == \"pneumonia\") {\n    column <- 23\n  } else {\n    stop(\"invalid outcome\")\n  }\n  \n  ## Cast outcome column to numeric for easier comparing and finding optimum\n  data[, column] <- suppressWarnings(as.numeric(data[, column]))\n  \n  ## Fail fast if is.numeric(num) and format not correct\n  ## hospital_rank is 1 if 'best', or 'worst', boolean decr is set to FALSE\n  ## by default (ascending sorting), TRUE if 'worst'\n  hospital_rank <- NULL\n  decr <- FALSE\n  if ( is.numeric(num) ) {\n    if (num < 1) {\n      return(NA)\n    } else {\n      hospital_rank <- num\n    }\n  } else if (is.character(num)) {\n    if (num == \"best\") {\n      hospital_rank <- 1\n    } else if (num == \"worst\") {\n      hospital_rank <- 1\n      decr <- TRUE\n    }\n  } else {\n    stop(\"invalid num\")\n  }\n  \n  ## Invariant: data and column are set to something useful\n  if (is.null(column) || is.null(hospital_rank))\n    stop(\"Got NULL value, this shouldn't happen!\")\n  \n  ## For each state, find the hospital of the given rank\n  sorted_all_states <-\n    data[ order(data[, \"State\"],\n                data[, column],\n                data[, \"Hospital.Name\"],\n                decreasing = decr, na.last = TRUE), ]\n  \n  states <- unique(sorted_all_states[, \"State\"])\n  \n  df <- data.frame()\n  for (state in states) {\n    state_list <- subset(sorted_all_states, State == state)\n    row <- data.frame(\"hospital\" = state_list[hospital_rank, ]$Hospital.Name, \n                      \"state\" = state)\n    \n    ## Result must be in increasing order for State column.\n    df <- if(!decr) rbind(df, row) else rbind(row, df)\n  }\n  \n  ## Return a data frame with the hospital names and the\n  ## (abbreviated) state name\n  df\n}\n\n\n\n",
    "created" : 1439318723432.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1802029175",
    "id" : "41E7BC52",
    "lastKnownWriteTime" : 1439327992,
    "path" : "~/R/Coursera/assignments/rprog-031/3/rankall.R",
    "project_path" : "rankall.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "type" : "r_source"
}